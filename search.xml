<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python中的迭代器和生成器</title>
      <link href="/2021-08/Python%E4%B8%AD%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/"/>
      <url>/2021-08/Python%E4%B8%AD%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h2><p>我们都知道python中有一大特性就是列表生成式，英文名 List Comprehension（之前面试的时候被问到我说没听说过，直到面试官说列表生成式的时候才反应过来。尴尬 - _ -||| ）。基本格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[i for i in (iterable)]</span><br></pre></td></tr></table></figure><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><p>列表生成器会返回一个列表，然而其会受到内存限制，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[i for i in range(10000**10000)]</span><br></pre></td></tr></table></figure><p>上式内存直接爆炸。</p><p>所以 python 中引入一种一边迭代一边计算的机制，叫做<b>生成器（generator）</b>。<br>在 Python 中，使用了 <b>yield</b> 的函数被称为生成器（generator）。在调用生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回 yield 的值, 并在下一次执行 next() 方法时从当前位置继续运行。</p><p>要创建一个generator，有很多种方法。第一种方法很简单，只要把一个列表生成式的[]改成()，就创建了一个generator：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; g = (i for i in range(3))</span><br><span class="line">&lt;generator object &lt;genexpr&gt; at 0x00000183E6523318&gt;</span><br><span class="line">&gt;&gt;&gt; for n in g:</span><br><span class="line">...     pass </span><br></pre></td></tr></table></figure><p>注意上式返回的是一个 generator，<b>并不是元组</b>。（面试时忘记此知识点，误以为()是元组操作会报错，然而返回的是一个生成器）。生成器也是一个<b>可迭代对象（iterable）</b>。</p><p>第二种方法可以使用函数 <strong>iter(obj)</strong> , 其中 obj 一定是一个 <strong>可迭代对象</strong> ，因为生成器本质上就是一个迭代器。</p><p>大多数生成器都有<strong>边界</strong>，即达到一个特定的条件，会返回 StopIteration，此错误类可以被 <code>except</code> 捕获。</p><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>可以直接作用于 for 循环的对象被称为<strong>可迭代对象（iterable）</strong>。像是一些集合类数据类型如 string、list、set、dict、tuple等，还有生成器和带 yield 的生成器函数。判断一个对象是否可迭代，可以使用 isinstance() ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections import Iterable</span><br><span class="line">&gt;&gt;&gt; isinstance([], Iterable)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(&#123;&#125;, Iterable)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance((), Iterable)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance((i for i in range(10)), Iterable)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(&quot;abc&quot;, Iterable)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(123, Iterable)</span><br><span class="line">False</span><br></pre></td></tr></table></figure><p>可以被<code>next()</code>函数调用并不断返回下一个值的对象称为迭代器：<code>Iterator</code>。可以使用<code>isinstance()</code>判断一个对象是否是Iterator对象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections import Iterator</span><br><span class="line">&gt;&gt;&gt; isinstance((x for x in range(10)), Iterator)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance([], Iterator)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; isinstance(&#123;&#125;, Iterator)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; isinstance(&#x27;abc&#x27;, Iterator)</span><br><span class="line">False</span><br></pre></td></tr></table></figure><p>生成器都是 <code>Iterator</code> 对象，但 <code>list</code>、<code>dict</code>、<code>str</code> 虽然是 <code>Iterable</code>，却不是 <code>Iterator</code>。把list、dict、str等Iterable变成Iterator可以使用iter()函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; isinstance(iter([]), Iterator)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(iter(&#x27;abc&#x27;), Iterator)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>Python的Iterator对象表示的是一个数据流，Iterator对象可以被 <code>next()</code> 函数调用并不断返回下一个数据，直到没有数据时抛出 <code>StopIteration</code> 错误。可以把这个数据流看做是一个有序序列，但我们却不能提前知道序列的长度，只能不断通过next()函数实现按需计算下一个数据，所以Iterator的计算是惰性的，只有在需要返回下一个数据时它才会计算。</p><p>Python的for循环本质上就是通过不断调用next()函数实现的，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for x in [1, 2, 3, 4, 5]:</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p>实际上完全等价于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it = iter([1, 2, 3, 4, 5])</span><br><span class="line">while True:</span><br><span class="line">    try:</span><br><span class="line">        x = next(it)</span><br><span class="line">    except StopIteration:</span><br><span class="line">        break</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><strong>列表生成式：</strong> 返回一个固定大小的列表，收内存限制，容量有限。</li><li><strong>生成器：</strong> 一边循环一边计算，使用yield返回值函数，生成器不但可以作用于for循环，还可以被next()函数不断调用并返回下一个值，直到最后抛出StopIteration。</li><li><strong>迭代器：</strong> 可以被next()函数调用并不断返回下一个值，一个实现了iter方法的对象是可迭代的，一个实现next方法并且是可迭代的对象是迭代器。</li></ul><h2 id="对yield的总结"><a href="#对yield的总结" class="headerlink" title="对yield的总结"></a>对yield的总结</h2><ul><li>通常的for..in…循环中，in后面是一个数组，这个数组就是一个可迭代对象，类似的还有链表，字符串，文件。他可以是a = [1,2,3]，也可以是a = [x*x for x in range(3)]。它的缺点也很明显，就是所有数据都在内存里面，如果有海量的数据，将会非常耗内存。</li><li>生成器是可以迭代的，但是只可以读取它一次。因为用的时候才生成，比如a = (x*x for x in range(3))。!!!!注意这里是小括号而不是方括号。</li><li>生成器（generator）能够迭代的关键是他有next()方法，工作原理就是通过重复调用next()方法，直到捕获一个异常。</li><li>带有yield的函数不再是一个普通的函数，而是一个生成器generator，可用于迭代</li><li>yield是一个类似return 的关键字，迭代一次遇到yield的时候就返回yield后面或者右面的值。而且下一次迭代的时候，从上一次迭代遇到的yield后面的代码开始执行</li><li>yield就是return返回的一个值，并且记住这个返回的位置。下一次迭代就从这个位置开始。</li><li>带有yield的函数不仅仅是只用于for循环，而且可用于某个函数的参数，只要这个函数的参数也允许迭代参数。</li><li>send()和next()的区别就在于send可传递参数给yield表达式，这时候传递的参数就会作为yield表达式的值，而yield的参数是返回给调用者的值，也就是说send可以强行修改上一个yield表达式值。</li><li>send()和next()都有返回值，他们的返回值是当前迭代遇到的yield的时候，yield后面表达式的值，其实就是当前迭代yield后面的参数。</li><li>第一次调用时候必须先next（）或send（）,否则会报错，send后之所以为None是因为这时候没有上一个yield，所以也可以认为next（）等同于send(None)</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论python的可变与不可变对象</title>
      <link href="/2021-08/%E8%AE%BApython%E7%9A%84%E5%8F%AF%E5%8F%98%E4%B8%8E%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1/"/>
      <url>/2021-08/%E8%AE%BApython%E7%9A%84%E5%8F%AF%E5%8F%98%E4%B8%8E%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h2><p>我们都知道python中有一大特性就是列表生成式，英文名 List Comprehension（之前面试的时候被问到我说没听说过，直到面试官说列表生成式的时候才反应过来。尴尬 - _ -||| ）。基本格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[i for i in (iterable)]</span><br></pre></td></tr></table></figure><h2 id="什么是可变-不可变对象"><a href="#什么是可变-不可变对象" class="headerlink" title="什么是可变/不可变对象"></a>什么是可变/不可变对象</h2><ul><li><b>不可变对象，即该对象所指向的内存中的值不能被改变。</b>当改变某个变量时候，由于其所指的值不能被改变，相当于把原来的值复制一份后再改变，这会开辟一个新的地址，变量再指向这个新的地址。</li><li><b>可变对象，该对象所指向的内存中的值可以被改变。</b>变量（准确的说是引用）改变后，实际上是其所指的值直接发生改变，并没有发生复制行为，也没有开辟新的出地址，通俗点说就是<b>原地改变</b>。</li></ul><p>在 python 的数据类型中，<font color="#F77567"><b>数值类型（int、float）、字符串str、元组tuple</b></font> 是<font color="#F77567"><b>不可变对象</b></font>。而<font color="#77C94B"><b>列表list、字典dict、集合set</b></font> 是<font color="#77C94B"><b>可变对象</b></font>。</p><h2 id="通过代码看变化"><a href="#通过代码看变化" class="headerlink" title="通过代码看变化"></a>通过代码看变化</h2><p>对于不可变对象来说，每次改变它的值，python都会开辟一个新的内存，将原值复制之后再改变。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = 1234</span><br><span class="line">&gt;&gt;&gt; id(a)</span><br><span class="line">1362244945808</span><br><span class="line">&gt;&gt;&gt; a -= 234</span><br><span class="line">&gt;&gt;&gt; id(a)</span><br><span class="line">1362245371952</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; b = &#x27;hello&#x27;</span><br><span class="line">&gt;&gt;&gt; id(b)</span><br><span class="line">1362248686928</span><br><span class="line">&gt;&gt;&gt; b += &#x27;world&#x27;</span><br><span class="line">&gt;&gt;&gt; id(b)</span><br><span class="line">1362248691120</span><br></pre></td></tr></table></figure><p>上面代码可以看见，不可变对象在每其值发生变化后，id 也发生变化，即变量指向的内存地址发生变化。</p><p><img src="https://wl-1301085254.cos.ap-chengdu.myqcloud.com/1578534351_20200109094056417_6270.png" alt="不可变对象"></p><p>而可变对象如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; c = [1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; id(c)</span><br><span class="line">1362245630600</span><br><span class="line">&gt;&gt;&gt; c.append(4)</span><br><span class="line">&gt;&gt;&gt; id(c)</span><br><span class="line">1362245630600</span><br><span class="line">&gt;&gt;&gt; c += [5, 6, 7]</span><br><span class="line">&gt;&gt;&gt; id(c)</span><br><span class="line">1362245630600</span><br></pre></td></tr></table></figure><p>可见可变对象的值在发生改变之后，其内存地址并不会发生变化，值的变化是直接在内存中改变的。引用也还是那个引用，内存也还是那个内存。<br><img src="https://wl-1301085254.cos.ap-chengdu.myqcloud.com/1578534353_20200109094205907_8395.png" alt="可变对象"></p><h2 id="令人懵逼的操作"><a href="#令人懵逼的操作" class="headerlink" title="令人懵逼的操作"></a>令人懵逼的操作</h2><p>可变对象和不可变对象是对于<b>直接引用的对象</b>来说的，即判断<b>原引用指向的地址值是否发生改变</b>。可以通过下面的例子来更深刻地理解这句话。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = [1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; id(a)</span><br><span class="line">1362245631752</span><br><span class="line">&gt;&gt;&gt; id(a[0])</span><br><span class="line">140728500671520</span><br><span class="line">&gt;&gt;&gt; a[0] += 4</span><br><span class="line">&gt;&gt;&gt; id(a)       #a的id发生变化了吗？</span><br><span class="line">&gt;&gt;&gt; id(a[0])    #a[0]的id发生变化了吗？</span><br></pre></td></tr></table></figure><p>根据上面所说的，可以很容易的知道 a 的 id 并没有发生改变，因为 a 是一个 list 的引用，a所指向的内存保存的仍是 list 开始的地址。而 a[0] 的 id 却发生变化了，因为 a[0] 是一个 int 的引用，当它所指向的内存的值（1）发生变化后，python 会新开辟一个内存地址存放新的对象（5），并将它的地址反馈给a[0]。</p><p>再看另一个懵逼的操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; b = (1, 2, [3,4])</span><br><span class="line">&gt;&gt;&gt; id(b)</span><br><span class="line">1362248603112</span><br><span class="line">&gt;&gt;&gt; id(b[2])</span><br><span class="line">1362248631816</span><br><span class="line">&gt;&gt;&gt; b[2].append(5)</span><br><span class="line">&gt;&gt;&gt; id(b[2])</span><br><span class="line">1362248631816</span><br><span class="line">&gt;&gt;&gt; id(b)</span><br><span class="line">1362248603112</span><br></pre></td></tr></table></figure><p>b[2] 的 id 没有发生变化比较好理解，可是 b 不是一个tuple吗？刚才说了 tuple 是不可变对象，为什么它的值发生变化之后 id(b) 没有改变呢？这是因为 b 指向的内存地址值并没有发生改变，虽然 b[2] 从 [3, 4] 变为了 [3, 4, 5]，但由于 b[2] 本是一个可变对象，当它的内容改变后，b[2] 的地址值并没有发生变化，所以对于 b 来说，b 所指向的内存的地址值同样没有发生变化，因此python不会为它新建一个内存地址。即 b[2] 的变化对于 b 来说是透明的。</p><p>第三个懵逼操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; c = [1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; id(c)</span><br><span class="line">1362248710536</span><br><span class="line">&gt;&gt;&gt; c += [4]</span><br><span class="line">&gt;&gt;&gt; id(c)</span><br><span class="line">1362248710536</span><br><span class="line">&gt;&gt;&gt; c = c + [5]</span><br><span class="line">&gt;&gt;&gt; id(c)</span><br><span class="line">1362245630600</span><br></pre></td></tr></table></figure><p>这又是什么操作？？？c 不是可变对象吗？为什么它的 id 一会儿变一会儿又不变（黑人问号脸）？？？这也是可以解释的：对于 c += [4] 来说，c 是二元运算符直接的操作对象，因此对于 c 这个可变对象来说，它的变化是在原有的内存中将值进行改变。但对于赋值操作来说就不一样了，等号右边的 c 还是原来的 c，但等号右边的 c 却是一个新开辟的 list 对象！因此 c = c + [5] 可以用下面的代码来解释：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; c = [1, 2, 3, 4]</span><br><span class="line">&gt;&gt;&gt; d = c + [5]</span><br><span class="line">&gt;&gt;&gt; c = d           # c = c + [5]</span><br><span class="line">&gt;&gt;&gt; id(c) == id(d)  #True or False?</span><br></pre></td></tr></table></figure><p>这就很好地解释了为什么经过赋值操作后 c 的 id 发生了变化。而后面的 id(c) 也肯定是等于 id(d) 的，因为此时 c 和 d 都指向了同一个 list 对象的地址！（因此在进行列表拷贝的时候，千万别用d=c 这种语法，因为d内容的改变会同时影响到c！）</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>begin</title>
      <link href="/2021-08/begin/"/>
      <url>/2021-08/begin/</url>
      
        <content type="html"><![CDATA[<p>通过一番调教，终于把博客基本的模型搭建好了。</p><p>博客是使用的 HEXO 框架，主题 <a href="https://butterfly.js.org/">Butterfly</a> ，比较符合自己的审美。</p><p>行こうよ~</p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
